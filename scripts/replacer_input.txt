=== PROCESSED: 2025-06-23 00:43:42 ===
SUCCESS Block 1: Updated /Users/stuart/repos/csl-parser/csl-parser/shared/doc/ABSTRACT.md
SUCCESS Block 2: Created /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/USAGE.md
SUCCESS Block 3: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/validation_rules.md
SUCCESS Block 4: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_imp.md
SUCCESS Block 5: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_imp.md
SUCCESS Block 6: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_reqs.md
SUCCESS Block 7: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_imp.md
SUCCESS Block 8: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/ARCH.md
SUCCESS Block 9: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/validation_rules.md
SUCCESS Block 10: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_reqs.md
===

## Documentation Updates for Executive Decisions

<<<EXPLANATION>>>
Remove usage pattern from shared utilities - violates CDD hierarchy
<<<FILE>>>
csl-parser/shared/doc/ABSTRACT.md
<<<SEARCH>>>
## Usage Pattern

```javascript
import { parse } from '../main/core/src/parser.js';
import { validate } from '../main/core/src/validator.js';

const ast = parse(cslText);  // Throws on syntax errors
const errors = validate(ast); // Returns array of semantic errors
if (errors.length > 0) {
  // Handle validation errors
}
```
<<<REPLACE>>>
<<<END>>>

<<<EXPLANATION>>>
Create new usage documentation in appropriate location
<<<FILE>>>
csl-parser/main/core/doc/USAGE.md
<<<OVERWRITE>>>
20250123

# CSL Parser Usage

## Basic Usage

```javascript
import { parse } from './src/parser.js';
import { validate } from './src/validator.js';

// Parse CSL text
const ast = parse(cslText);  // Throws on syntax errors

// Validate AST
const errors = validate(ast); // Returns array of semantic errors
if (errors.length > 0) {
  // Handle validation errors
  errors.forEach(error => {
    console.error(`Line ${error.line}: ${error.error}`);
  });
}
```

## Error Handling

### Syntax Errors (Parser)
```javascript
try {
  const ast = parse(invalidCsl);
} catch (error) {
  // Parser throws on first syntax error
  console.error(error.message); // "Line 5: Unknown operation: INVALID"
}
```

### Semantic Errors (Validator)
```javascript
const ast = parse(validSyntaxBadSemantics);
const errors = validate(ast);
// Validator returns ALL errors
// [{line: 1, operation: 'WRITE', error: "Missing required attribute 'file'"}]
```

## Two-Phase Design

1. **Parse Phase**: Syntax and structure validation only
2. **Validation Phase**: Semantic and business rule validation

This separation enables:
- Tooling that works with syntactically valid but semantically invalid CSL
- Better error reporting (all semantic errors at once)
- Clearer module responsibilities
<<<END>>>

<<<EXPLANATION>>>
Update validation rules to allow empty TASKS
<<<FILE>>>
csl-parser/main/core/doc/validation_rules.md
<<<SEARCH>>>
**Content rules**:
- Must contain at least one operation
- Cannot contain nested TASKS
<<<REPLACE>>>
**Content rules**:
- Empty TASKS allowed (operations array can be empty)
- Cannot contain nested TASKS
<<<END>>>

<<<EXPLANATION>>>
Add explicit unknown operation behavior to implementation guide
<<<FILE>>>
csl-parser/main/core/doc/csl_imp.md
<<<SEARCH>>>
- **Lexical Errors**:
  - Malformed markers: missing delimiters, incomplete markers
  - Unterminated quoted attributes
  - Unknown operation names (not WRITE, RUN, SEARCH, TASKS)
<<<REPLACE>>>
- **Lexical Errors**:
  - Malformed markers: missing delimiters, incomplete markers
  - Unterminated quoted attributes
  - Unknown operation names: Any `<---XXX--->` where XXX is not WRITE/RUN/SEARCH/TASKS/END/TO/REPLACE
<<<END>>>

<<<EXPLANATION>>>
Add state transition table to implementation guide
<<<FILE>>>
csl-parser/main/core/doc/csl_imp.md
<<<SEARCH>>>
### State Transition Validation
- Maintain transition table for valid state changes
- Check marker type against current state
- Update state and initialize appropriate buffers
- Track TASKS depth for nesting validation
<<<REPLACE>>>
### State Transition Validation

State transition table:

| Current State | Valid Next Markers | Next State |
|--------------|-------------------|------------|
| TOP_LEVEL | WRITE, RUN, SEARCH, TASKS | COLLECTING_[OPERATION] |
| COLLECTING_WRITE | END | TOP_LEVEL or TASKS_LEVEL |
| COLLECTING_RUN | END | TOP_LEVEL or TASKS_LEVEL |
| COLLECTING_SEARCH | TO, REPLACE | COLLECTING_SEARCH_TO or COLLECTING_SEARCH_REPLACE |
| COLLECTING_SEARCH_TO | REPLACE | COLLECTING_SEARCH_REPLACE |
| COLLECTING_SEARCH_REPLACE | END | TOP_LEVEL or TASKS_LEVEL |
| COLLECTING_TASKS | WRITE, RUN, SEARCH, END | TASKS_LEVEL or TOP_LEVEL |
| TASKS_LEVEL | WRITE, RUN, SEARCH | COLLECTING_[OPERATION] |

- Invalid transitions throw immediately
- Track return state (TOP_LEVEL or TASKS_LEVEL) on operation stack
<<<END>>>

<<<EXPLANATION>>>
Fix terminology confusion in CSL requirements Q&A
<<<FILE>>>
csl-parser/main/core/doc/csl_reqs.md
<<<SEARCH>>>
- SEARCH pattern content: `<---TO--->`, `<---REPLACE--->`, `<---END--->`
- SEARCH end content: only `<---REPLACE--->`
<<<REPLACE>>>
- SEARCH pattern content: `<---TO--->`, `<---REPLACE--->`, `<---END--->`
- SEARCH to content: only `<---REPLACE--->`
<<<END>>>

<<<EXPLANATION>>>
Add attribute whitespace specification
<<<FILE>>>
csl-parser/main/core/doc/csl_imp.md
<<<SEARCH>>>
2. For each token: extract key=value pattern
<<<REPLACE>>>
2. For each token: extract key=value pattern using `/(\S+)\s*=\s*("[^"]*"|'[^']*')/`
<<<END>>>

<<<EXPLANATION>>>
Document validator location in architecture
<<<FILE>>>
csl-parser/main/core/doc/ARCH.md
<<<SEARCH>>>
## Components

- parser: converts CSL text to AST through single-pass state machine processing
- validator: checks semantic rules on AST, reports all violations
<<<REPLACE>>>
## Components

- parser: converts CSL text to AST through single-pass state machine processing (`main/core/src/parser.js`)
- validator: checks semantic rules on AST, reports all violations (`main/core/src/validator.js`)
<<<END>>>

<<<EXPLANATION>>>
Clarify error messages are exact requirements
<<<FILE>>>
csl-parser/main/core/doc/validation_rules.md
<<<SEARCH>>>
## Error Messages

Standardized error messages for consistency:
<<<REPLACE>>>
## Error Messages

Required exact error messages (validator must output these verbatim):
<<<END>>>

<<<EXPLANATION>>>
Add note about whitespace flexibility in attributes
<<<FILE>>>
csl-parser/main/core/doc/csl_reqs.md
<<<SEARCH>>>
- Whitespace allowed around `=`
<<<REPLACE>>>
- Whitespace allowed around `=` (e.g., `attr = "value"` valid)
<<<END>>>