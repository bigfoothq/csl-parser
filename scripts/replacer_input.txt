=== PROCESSED: 2025-06-23 00:04:25 ===
SUCCESS Block 1: Created /Users/stuart/repos/csl-parser/csl-parser/shared/doc/TYPES.md
ERROR Block 2: No match found in /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_reqs.md
SUCCESS Block 3: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_reqs.md
ERROR Block 4: No match found in /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_imp.md
SUCCESS Block 5: Updated /Users/stuart/repos/csl-parser/csl-parser/main/core/doc/csl_imp.md
===

<<<EXPLANATION>>>
Define AST structure explicitly in TYPES.md as decided

<<<FILE>>>
csl-parser/shared/doc/TYPES.md

<<<OVERWRITE>>>
20250123

# CSL Parser Types

## AST Structure

```typescript
type Operation = {
  type: 'WRITE' | 'RUN' | 'SEARCH' | 'TASKS';
  line: number;
  
  // Attributes - all optional, flattened to top level
  file?: string;
  append?: string;
  dir?: string;
  count?: string;
  version?: string;
  
  // Content fields - presence depends on operation type
  content?: string;      // WRITE, RUN
  pattern?: string;      // SEARCH
  to?: string;           // SEARCH (optional)
  replacement?: string;  // SEARCH
  
  // TASKS only
  operations?: Operation[];
  
  // Extension point - any additional attributes
  [key: string]: any;
}

type AST = Operation[];
```

## Field Constraints by Operation Type

### WRITE
- Required: `type`, `line`, `file`, `content`
- Optional: `append`

### RUN  
- Required: `type`, `line`, `content`
- Optional: `dir`

### SEARCH
- Required: `type`, `line`, `file`, `pattern`, `replacement`
- Optional: `count`, `to`

### TASKS
- Required: `type`, `line`, `operations`
- Optional: `version`

## Notes

- Parser outputs may include invalid states (missing required fields) to enable better error messages
- Additional attributes from CSL are preserved as top-level properties
- All string values preserved exactly as parsed (no type coercion)
- Line numbers are 1-indexed
<<<END>>>

<<<EXPLANATION>>>
Remove line ending preservation requirements from spec

<<<FILE>>>
csl-parser/main/core/doc/csl_reqs.md

<<<SEARCH>>>
### Line Ending Preservation
- Content starts on the line after an operation marker
- Content ends on the line before the END marker
- Each line of content preserves its text exactly, without line endings
- Line endings are reconstructed based on which lines had endings in the original
- Parser must track line ending types (\n, \r\n, \r) to reconstruct exactly
- Mixed line endings within content must be preserved byte-for-byte
- Inline END markers are invalid - END must start at beginning of line
<<<REPLACE>>>
### Content Handling
- Content starts on the line after an operation marker
- Content ends on the line before the END marker
- All line endings normalized to LF (\n) during parsing
- Platform-specific line endings handled at execution time
<<<END>>>

<<<EXPLANATION>>>
Add execution layer note to clarify parser boundaries

<<<FILE>>>
csl-parser/main/core/doc/csl_reqs.md

<<<SEARCH>>>
## Edge Cases
- All markers (`<---OPERATION...>`, `<---TO--->`, `<---REPLACE--->`, `<---END--->`) must be complete lines with no other content
<<<REPLACE>>>
## Execution Considerations (Not Parser Responsibility)
- Platform-specific line endings applied during file operations
- SEARCH operations normalize both file and pattern for matching
- Binary file detection prevents unwanted normalization

## Edge Cases
- All markers (`<---OPERATION...>`, `<---TO--->`, `<---REPLACE--->`, `<---END--->`) must be complete lines with no other content
<<<END>>>

<<<EXPLANATION>>>
Update implementation guide to remove line ending tracking

<<<FILE>>>
csl-parser/main/core/doc/csl_imp.md

<<<SEARCH>>>
## Content Preservation
- Maintain exact byte sequences
- No line ending normalization
- No whitespace trimming
- Content blocks include all lines between markers
- Line endings are not stored with content lines
- Parser must track which lines had endings and their type
- Reconstruction joins lines with appropriate endings
- Final line ending presence determined by blank line before END marker
<<<REPLACE>>>
## Content Handling
- Join content lines with LF (\n)
- No whitespace trimming
- Empty content = zero bytes between markers
- Trailing newline included if blank line before END marker
<<<END>>>

<<<EXPLANATION>>>
Add AST construction details with new structure

<<<FILE>>>
csl-parser/main/core/doc/csl_imp.md

<<<SEARCH>>>
## AST Construction
- Build operation objects incrementally
- Attach line numbers for error context
- Validate required fields before returning
- Type remains as string (no coercion)
- Return array of operation objects
<<<REPLACE>>>
## AST Construction
- Build operation objects incrementally
- Attach line numbers for error context
- Validate required fields before returning
- Type remains as string (no coercion)
- Flatten all attributes to top level of operation object
- Preserve unknown attributes as-is
- Return array of operation objects per TYPES.md schema
<<<END>>>

<<<EXPLANATION>>>
Remove obsolete Q&A about escape sequences

<<<FILE>>>
csl-parser/main/core/doc/csl_reqs.md

<<<SEARCH>>>
## Escape Sequences
**Q**: What happens with `\n`, `\t`, or `\x` where x is not `"`, `'`, or `\`?

**A**: Literal text. `\n` = `\n` (two characters), not newline.
<<<REPLACE>>>
<<<END>>>